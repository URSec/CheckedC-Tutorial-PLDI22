diff --git a/to_ppm.c b/to_ppm.c
index 95ffe91..27527fe 100644
--- a/to_ppm.c
+++ b/to_ppm.c
@@ -13,8 +13,7 @@ void put_scanline_someplace(JSAMPROW buffer : count(row_stride), int row_stride)

 struct my_error_mgr {
   struct jpeg_error_mgr pub;	/* "public" fields */
-
-  jmp_buf setjmp_buffer;	/* for return to caller */
+  jmp_buf setjmp_buffer : itype(struct __jmp_buf_tag _Checked[1]);	/* for return to caller */
 };

 typedef _Ptr<struct my_error_mgr> my_error_ptr;
@@ -34,7 +33,7 @@ my_error_exit (j_common_ptr cinfo)
   (*cinfo->err->output_message) (cinfo);

   /* Return control to the setjmp point */
-  longjmp(myerr->setjmp_buffer, 1);
+  _Unchecked { longjmp(myerr->setjmp_buffer, 1); }
 }


@@ -79,7 +78,9 @@ read_JPEG_file (_Nt_array_ptr<char> filename)
   cinfo.err = jpeg_std_error(&jerr.pub);
   jerr.pub.error_exit = my_error_exit;
   /* Establish the setjmp return context for my_error_exit to use. */
-  if (setjmp(jerr.setjmp_buffer)) {
+  int jmp = 0;
+  _Unchecked { jmp = setjmp(jerr.setjmp_buffer); }
+  if (jmp) {
     /* If we get here, the JPEG code has signaled an error.
      * We need to clean up the JPEG object, close the input file, and return.
      */
@@ -133,7 +134,7 @@ read_JPEG_file (_Nt_array_ptr<char> filename)
   } else if (cinfo.output_components == 3) {
     printf("P3\n");
   } else {
-    longjmp(jerr.setjmp_buffer, 1);
+    _Unchecked { longjmp(jerr.setjmp_buffer, 1); }
   }
   printf("%d %d\n255\n", cinfo.output_width, cinfo.output_height);

@@ -151,7 +152,12 @@ read_JPEG_file (_Nt_array_ptr<char> filename)
      */
     (void) jpeg_read_scanlines(&cinfo, buffer, 1);
     /* Assume put_scanline_someplace wants a pointer and sample count. */
-    put_scanline_someplace(_Assume_bounds_cast<JSAMPROW >(buffer[0],  count(row_stride)), row_stride);
+    JSAMPROW row_unkb : bounds(unknown) = buffer[0];
+    JSAMPROW row : count(row_stride) = 0;
+    _Unchecked {
+      row = _Assume_bounds_cast<JSAMPROW>(row_unkb,  count(row_stride));
+    }
+    put_scanline_someplace(row, row_stride);
   }

   /* Step 7: Finish decompression */
